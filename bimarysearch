#include <stdio.h>
// Function to perform binary search and find all occurrences
void binarySearch(int arr[20], int n, int item) {
    int low = 0, high = n - 1, mid;
    int firstIndex = -1, lastIndex = -1;

    while (low <= high) {
        mid = (low + high) / 2;

        if (arr[mid] == item) {
            firstIndex = lastIndex = mid;

            // Search for the first occurrence
            int tempMid = mid;
            while (tempMid >= 0 && arr[tempMid] == item) {
                firstIndex = tempMid;
                tempMid--;
            }

            // Search for the last occurrence
            tempMid = mid;
            while (tempMid < n && arr[tempMid] == item) {
                lastIndex = tempMid;
                tempMid++;
            }
            break;
        } 
        else if (arr[mid] < item) {
            low = mid + 1;
        } 
        else {
            high = mid - 1;
        }
    }

    if (firstIndex != -1) {
        printf("Element %d found from index %d to index %d\n", item, firstIndex, lastIndex);
    } else {
        printf("Element %d not found in the array\n", item);
    }
}

int main() {
    int n, item, i, j, temp;

    // Prompt the user to enter the number of elements in the array
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Prompt the user to enter the elements of the array
    printf("Enter the elements of the array:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Prompt the user to enter the item to search for
    printf("Enter the item to search: ");
    scanf("%d", &item);

    // Sort the array in ascending order using bubble sort
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {  // Fix comparison logic
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }

    // Print the sorted array
    printf("Sorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Perform binary search to find all occurrences
    binarySearch(arr, n, item);

    return 0;
}
